set(PACKAGE_PATH ${SHEEP_PROJECT_SOURCE_DIR}/src/small_server)
FIND_PATH(small_server_INCLUDE_DIRS small_server.h ${PACKAGE_PATH}/)
#FIND_LIBRARY(small_server_LIBRARIES libsmall_server.a PATH ${PACKAGE_PATH}/build)

#IF (small_server_INCLUDE_DIRS AND small_server_LIBRARIES)
IF (small_server_INCLUDE_DIRS)
	SET(small_server_FOUND TRUE)
ENDIF (small_server_INCLUDE_DIRS)
#ENDIF (small_server_INCLUDE_DIRS AND small_server_LIBRARIES)
IF (small_server_FOUND)
    IF (NOT small_server_FIND_QUIETLY)
        MESSAGE(STATUS "Found small_server ${small_server_INCLUDE_DIRS}")
    ENDIF (NOT small_server_FIND_QUIETLY)
ELSE (small_server_FOUND)
    IF (small_server_FIND_REQUIRED)
        MESSAGE(FATAL_ERROR "Could not find small_server library")
    ENDIF (small_server_FIND_REQUIRED)
ENDIF (small_server_FOUND)

find_package(gRPC CONFIG)
if (gRPC_FOUND)
    SET(gRPC_LIBS gRPC::gpr gRPC::grpc gRPC::grpc++ gRPC::grpc_cronet)
else (gRPC_FOUND)
    SET(gRPC_LIBS libgrpc++.a libgrpc.a libprotobuf.a)
endif(gRPC_FOUND)
SET(small_server_LIBRARIES ${small_server_LIBRARIES} ${gRPC_LIBS})

find_package(small_http_client REQUIRED)
SET(small_server_INCLUDE_DIRS ${small_server_INCLUDE_DIRS} ${small_http_client_INCLUDE_DIRS})
SET(small_server_LIBRARIES ${small_server_LIBRARIES} ${small_http_client_LIBRARIES})

find_package(small_timer REQUIRED)
SET(small_server_INCLUDE_DIRS ${small_server_INCLUDE_DIRS} ${small_timer_INCLUDE_DIRS})
SET(small_server_LIBRARIES ${small_server_LIBRARIES} ${small_timer_LIBRARIES})

find_package(small_packages REQUIRED)
SET(small_server_INCLUDE_DIRS ${small_server_INCLUDE_DIRS} ${small_packages_INCLUDE_DIRS})
SET(small_server_LIBRARIES ${small_server_LIBRARIES} ${small_packages_LIBRARIES})

find_package(log REQUIRED)
SET(small_server_INCLUDE_DIRS ${small_server_INCLUDE_DIRS} ${log_INCLUDE_DIRS})
SET(small_server_LIBRARIES ${small_server_LIBRARIES} ${log_LIBRARIES})

SET(small_server_LIBRARIES ${small_server_LIBRARIES} libz.a)
